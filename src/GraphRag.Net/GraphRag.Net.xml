<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphRag.Net</name>
    </assembly>
    <members>
        <member name="T:GraphRag.Net.ServiceCollectionExtensions">
            <summary>
            容器扩展
            </summary>
        </member>
        <member name="M:GraphRag.Net.ServiceCollectionExtensions.AddGraphRagNet(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            从程序集中加载类型并添加到容器中
            </summary>
            <param name="services">容器</param>
            <param name="assemblies">程序集集合</param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.ServiceCollectionExtensions.InitSK(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            初始化SK
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:GraphRag.Net.ServiceCollectionExtensions.CodeFirst">
            <summary>
            初始化DB
            </summary>
        </member>
        <member name="F:GraphRag.Net.ServiceLifetime.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:GraphRag.Net.ServiceLifetime.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="F:GraphRag.Net.ServiceLifetime.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="M:GraphRag.Net.Common.Map.MapperExtend.ToDTOList``1(System.Object)">
            <summary>
            Entity集合转DTO集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Common.Map.MapperExtend.ToDTO``1(System.Object)">
            <summary>
            Entity转DTO
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:GraphRag.Net.Common.Options.TextChunkerOption.LinesToken">
            <summary>
            行切片token
            </summary>
        </member>
        <member name="P:GraphRag.Net.Common.Options.TextChunkerOption.ParagraphsToken">
            <summary>
            段落切片token
            </summary>
        </member>
        <member name="P:GraphRag.Net.Options.GraphDBConnectionOption.DbType">
            <summary>
            sqlite连接字符串
            </summary>
        </member>
        <member name="P:GraphRag.Net.Options.GraphDBConnectionOption.ConnectionStrings">
            <summary>
            pg链接字符串
            </summary>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.GetAllIndex">
            <summary>
            获取所有索引信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.GetAllGraphs(System.String)">
            <summary>
            获取Graph数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.InsertTextChunkAsync(System.String,System.String)">
            <summary>
            切片导入文本数据
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.InsertGraphDataAsync(System.String,System.String)">
            <summary>
            生成图谱数据
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.SearchGraphAsync(System.String,System.String)">
            <summary>
            搜索递归获取节点相关的所有边和节点进行图谱对话
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.SearchGraphCommunityAsync(System.String,System.String)">
            <summary>
            通过社区算法检索社区节点进行对话
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.GraphCommunitiesAsync(System.String)">
            <summary>
            社区摘要
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Interface.IGraphService.GraphGlobalAsync(System.String)">
            <summary>
            全局摘要
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetAllIndex">
            <summary>
            获取所有索引信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetAllGraphs(System.String)">
            <summary>
            获取Graph数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.InsertTextChunkAsync(System.String,System.String)">
            <summary>
            切片导入文本数据
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.InsertGraphDataAsync(System.String,System.String)">
            <summary>
            生成图谱数据
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.SearchGraphAsync(System.String,System.String)">
            <summary>
            搜索递归获取节点相关的所有边和节点进行图谱对话
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.SearchGraphCommunityAsync(System.String,System.String)">
            <summary>
            通过社区算法检索社区节点进行对话
            </summary>
            <param name="index"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GraphCommunitiesAsync(System.String)">
            <summary>
            社区摘要
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GraphGlobalAsync(System.String)">
            <summary>
            全局摘要
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetGraphAllRecursion(System.String,System.Collections.Generic.List{GraphRag.Net.Repositories.Graph.Nodes.Nodes})">
            <summary>
            递归获取节点相关的所有边和节点
            </summary>
            <param name="initialNodes"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetGraphAllCommunitiesRecursion(System.String,System.Collections.Generic.List{GraphRag.Net.Repositories.Graph.Nodes.Nodes})">
            <summary>
            通过社区算法检索社区节点
            </summary>
            <param name="index"></param>
            <param name="initialNodes"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetEdges(System.String,System.Collections.Generic.List{GraphRag.Net.Repositories.Graph.Nodes.Nodes})">
            <summary>
            获取边信息
            </summary>
            <param name="nodeIds"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Domain.Service.GraphService.GetNodes(System.String,System.Collections.Generic.List{GraphRag.Net.Repositories.Graph.Edges.Edges})">
            <summary>
            获取节点信息
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="P:GraphRag.Net.Model.PageList`1.PageIndex">
            <summary>
            当前页，从1开始
            </summary>
        </member>
        <member name="P:GraphRag.Net.Model.PageList`1.PageSize">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:GraphRag.Net.Model.PageList`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetList">
            <summary>
            获取所有list
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetListAsync">
            <summary>
            获取所有list-异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetPageListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页-异步
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetById(System.Object)">
            <summary>
            根据id获取实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetByIdAsync(System.Object)">
            <summary>
            根据id获取实体-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象-异步  （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 --异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Insert(`0)">
            <summary>
            实体插入
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertAsync(`0)">
            <summary>
            实体插入-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertRange(System.Collections.Generic.List{`0})">
            <summary>
            批量插入
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量插入-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertReturnIdentity(`0)">
            <summary>
            插入返回自增列
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            插入返回自增列-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertReturnBigIdentity(`0)">
            <summary>
            插入返回longid
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertReturnBigIdentityAsync(`0)">
            <summary>
            插入返回longid-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.DeleteByIds(System.Object[])">
            <summary>
            批量删除
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.DeleteByIdsAsync(System.Object[])">
            <summary>
            批量删除-异步
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Delete(System.Object)">
            <summary>
            根据主键删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.DeleteAsync(System.Object)">
            <summary>
            根据主键删除-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Delete(`0)">
            <summary>
            根据实体删除
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.DeleteAsync(`0)">
            <summary>
            根据实体删除-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.UpdateAsync(`0)">
            <summary>
            更新-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.UpdateRange(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertOrUpdate(`0)">
            <summary>
            新增或修改
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.InsertOrUpdateAsync(`0)">
            <summary>
            新增或修改-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.UpdateRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量更新-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.IsAny(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.Repository`1.IsAnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Base.SqlSugarHelper.SqlScope">
            <summary>
            sqlserver连接
            </summary>
        </member>
        <member name="T:GraphRag.Net.Repositories.CommunitieNodes">
            <summary>
            社区与节点关系
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.CommunitieNodes.Index">
            <summary>
            索引信息
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.CommunitieNodes.CommunitieId">
            <summary>
            社区关键节点ID
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.CommunitieNodes.NodeId">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="T:GraphRag.Net.Repositories.Graph.Edges.Edges">
            <summary>
            边
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Edges.Edges.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Edges.Edges.Source">
            <summary>
            源ID
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Edges.Edges.Target">
            <summary>
            目标ID
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Edges.Edges.Relationship">
            <summary>
            关系信息
            </summary>
        </member>
        <member name="T:GraphRag.Net.Repositories.Graph.Nodes.Nodes">
            <summary>
            节点
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Nodes.Nodes.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Nodes.Nodes.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Nodes.Nodes.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Nodes.Nodes.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Graph.Nodes.Nodes.Desc">
            <summary>
            节点描述
            </summary>
        </member>
        <member name="T:GraphRag.Net.Repositories.Communities">
            <summary>
            社区
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Communities.CommunitieId">
            <summary>
            社区ID
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Communities.Index">
            <summary>
            索引信息
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Communities.Summaries">
            <summary>
            社区摘要
            </summary>
        </member>
        <member name="T:GraphRag.Net.Repositories.Globals">
            <summary>
            社区
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Globals.Index">
            <summary>
            索引信息
            </summary>
        </member>
        <member name="P:GraphRag.Net.Repositories.Globals.Summaries">
            <summary>
            全局摘要
            </summary>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.IsNull(System.Object)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.IsNotNull(System.Object)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.IsNull(System.String)">
            <summary>
            判断是否为空，为空返回true
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToString(System.Object)">
            <summary>
            将obj类型转换为string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToInt32(System.Object)">
            <summary>
            object 转int32
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToInt64(System.Object)">
            <summary>
            object 转int32
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToDouble(System.Object)">
            <summary>
            将字符串转double
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToDateTime(System.String)">
            <summary>
            转换为datetime类型
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToDateTime(System.String,System.String)">
            <summary>
            转换为datetime类型的格式字符串
            </summary>
            <param name="s">要转换的对象</param>
            <param name="y">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ConvertToDecimal(System.Object)">
            <summary>
            将字符串转换成decimal
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.DecimalFraction(System.Decimal)">
            <summary>
            decimal保留2位小数
            </summary>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ReplaceHtml(System.String)">
            <summary>
            替换html种的特殊字符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.StreamToByte(System.IO.Stream)">
            <summary>
            流转byte
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            json参数转化querystring参数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.ComparisonIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写匹配
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.IsStream(System.String)">
            <summary>
            是否为流式请求
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.ConvertUtils.Unescape(System.String)">
            <summary>
            \uxxxx转中文,保留换行符号
            </summary>
            <param name="unicodeString"></param>
            <returns></returns>
        </member>
        <member name="M:GraphRag.Net.Utils.RepoFiles.SamplePluginsPath">
            <summary>
            Scan the local folders from the repo, looking for "samples/plugins" folder.
            </summary>
            <returns>The full path to samples/plugins</returns>
        </member>
    </members>
</doc>
